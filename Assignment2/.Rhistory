# 1) Define normal mixture density for convenience
dnorm_mixture <- function(x, mu1, var1, mu2, var2, p=0.5) {
# p is the mixing proportion (assumed 0.5 here)
p*dnorm(x, mean=mu1, sd=sqrt(var1)) +
(1-p)*dnorm(x, mean=mu2, sd=sqrt(var2))
}
# 2) Define the difference function D(x):
#    D(x) = 0.6 * p(x|y=1) - 0.4 * p(x|y=0).
D <- function(x) {
# p(x | y=0) is mixture of N(0.2,0.04) and N(0.6,0.09)
px_y0 <- dnorm_mixture(x, mu1=0.2, var1=0.04,
mu2=0.6, var2=0.09)
# p(x | y=1) is mixture of N(-0.5,0.04) and N(0.8,0.01)
px_y1 <- dnorm_mixture(x, mu1=-0.5, var1=0.04,
mu2=0.8,  var2=0.01)
0.6 * px_y1 - 0.4 * px_y0
}
# 3) Create a grid of x-values and evaluate D(x)
xgrid <- seq(-3, 3, length.out=1000)
diff_vals <- sapply(xgrid, D)
# 4) Plot D(x) vs. x
plot(xgrid, diff_vals, type="l", lwd=2,
main="Bayes Decision Function: 0.6 p(x|y=1) - 0.4 p(x|y=0)",
xlab="x", ylab="Difference")
abline(h=0, col="red", lty=2)
# 5) (Optional) Numerically find any crossing(s) where D(x) = 0
#    uniroot() finds a root within a specified interval.
#    If there are multiple crossings, you may need to search in sub-intervals.
possible_root <- uniroot(D, interval=c(-3,3))
# -----------------------------
# 1) Define normal mixture pdf
dnorm_mixture <- function(x, mu1, var1, mu2, var2, p=0.5) {
p*dnorm(x, mean=mu1, sd=sqrt(var1)) +
(1-p)*dnorm(x, mean=mu2, sd=sqrt(var2))
}
# -----------------------------
# 2) Define D(x) = 0.6 p(x|y=1) - 0.4 p(x|y=0)
D <- function(x) {
px_y0 <- dnorm_mixture(x, mu1=0.2,  var1=0.04,
mu2=0.6,  var2=0.09)
px_y1 <- dnorm_mixture(x, mu1=-0.5, var1=0.04,
mu2=0.8,  var2=0.01)
0.6*px_y1 - 0.4*px_y0
}
# -----------------------------
# 3) Evaluate D(x) over a grid and find sign changes
xgrid <- seq(-4, 4, length.out=1000)
vals  <- sapply(xgrid, D)
# Identify intervals where sign changes occur
# (a sign change occurs if D(x_i)*D(x_{i+1}) < 0)
root_indices <- which(vals[-length(vals)] * vals[-1] < 0)
# -----------------------------
# 4) For each sign-changing interval, call uniroot to solve D(x)=0 accurately
boundary_points <- numeric(length(root_indices))
for (i in seq_along(root_indices)) {
idx <- root_indices[i]
interval <- c(xgrid[idx], xgrid[idx+1])
r <- uniroot(D, interval=interval)$root
boundary_points[i] <- r
}
boundary_points
createFolds <- function(y, k, stratified = FALSE, seed = 0) {
# Set the random seed
set.seed(seed)
# If y is a single number, treat it as sample size and create an index vector.
if (length(y) == 1 && is.numeric(y)) {
n <- y
if (stratified) {
warning("Stratification is only valid for categorical outputs. Using unstratified folds.")
stratified <- FALSE
}
y <- seq_len(n)
} else {
n <- length(y)
}
folds <- vector("list", k)
if (!stratified) {
# Unstratified: Simply randomize indices and assign to folds.
indices <- sample(n)
# Compute fold sizes: most folds will have floor(n/k) observations;
# the first few folds will get an extra one if n is not divisible by k.
fold_sizes <- rep(floor(n/k), k)
remainder <- n - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- indices[start_index:end_index]
start_index <- end_index + 1
}
} else {
# Stratified: The fold structure will preserve class proportions.
# First, ensure that y is a factor.
if (!is.factor(y)) {
y <- as.factor(y)
}
# Initialize each fold as an empty vector.
for (i in 1:k) {
folds[[i]] <- c()
}
# For each level (class), split the indices of that class into k roughly equal parts.
for (lvl in levels(y)) {
lvl_indices <- which(y == lvl)
lvl_indices <- sample(lvl_indices)  # Randomize the indices for this level.
n_lvl <- length(lvl_indices)
# Compute fold sizes for this class.
fold_sizes <- rep(floor(n_lvl/k), k)
remainder <- n_lvl - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- c(folds[[i]], lvl_indices[start_index:end_index])
start_index <- end_index + 1
}
}
return(folds)
}
kfold(10, 2, FALSE, )
#
fo
kfold(10, 2, FALSE, )
kfold(10, 2, FALSE, 0)
print(folds)
return(folds)
if (!stratified) {
# Unstratified: Simply randomize indices and assign to folds.
indices <- sample(n)
# Compute fold sizes: most folds will have floor(n/k) observations;
# the first few folds will get an extra one if n is not divisible by k.
fold_sizes <- rep(floor(n/k), k)
remainder <- n - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- indices[start_index:end_index]
start_index <- end_index + 1
}
} else {
# Stratified: The fold structure will preserve class proportions.
# First, ensure that y is a factor.
if (!is.factor(y)) {
y <- as.factor(y)
}
# Initialize each fold as an empty vector.
for (i in 1:k) {
folds[[i]] <- c()
}
# For each level (class), split the indices of that class into k roughly equal parts.
for (lvl in levels(y)) {
lvl_indices <- which(y == lvl)
lvl_indices <- sample(lvl_indices)  # Randomize the indices for this level.
n_lvl <- length(lvl_indices)
# Compute fold sizes for this class.
fold_sizes <- rep(floor(n_lvl/k), k)
remainder <- n_lvl - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- c(folds[[i]], lvl_indices[start_index:end_index])
start_index <- end_index + 1
}
}
print(folds)
return(folds)
}
kfold(10, 2, FALSE, 0)
createFolds <- function(y, k, stratified = FALSE, seed = 0) {
# Set the random seed
set.seed(seed)
# If y is a single number, treat it as sample size and create an index vector.
if (length(y) == 1 && is.numeric(y)) {
n <- y
if (stratified) {
warning("Stratification is only valid for categorical outputs. Using unstratified folds.")
stratified <- FALSE
}
y <- seq_len(n)
} else {
n <- length(y)
}
folds <- vector("list", k)
if (!stratified) {
# Unstratified: Simply randomize indices and assign to folds.
indices <- sample(n)
# Compute fold sizes: most folds will have floor(n/k) observations;
# the first few folds will get an extra one if n is not divisible by k.
fold_sizes <- rep(floor(n/k), k)
remainder <- n - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- indices[start_index:end_index]
start_index <- end_index + 1
}
} else {
# Stratified: The fold structure will preserve class proportions.
# First, ensure that y is a factor.
if (!is.factor(y)) {
y <- as.factor(y)
}
# Initialize each fold as an empty vector.
for (i in 1:k) {
folds[[i]] <- c()
}
# For each level (class), split the indices of that class into k roughly equal parts.
for (lvl in levels(y)) {
lvl_indices <- which(y == lvl)
lvl_indices <- sample(lvl_indices)  # Randomize the indices for this level.
n_lvl <- length(lvl_indices)
# Compute fold sizes for this class.
fold_sizes <- rep(floor(n_lvl/k), k)
remainder <- n_lvl - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- c(folds[[i]], lvl_indices[start_index:end_index])
start_index <- end_index + 1
}
}
print(folds)
return(folds)
}
kfold(10, 2, FALSE, 0)
createFolds <- function(y, k, stratified = FALSE, seed = 0) {
# Set the random seed
set.seed(seed)
# If y is a single number, treat it as sample size and create an index vector.
if (length(y) == 1 && is.numeric(y)) {
n <- y
if (stratified) {
warning("Stratification is only valid for categorical outputs. Using unstratified folds.")
stratified <- FALSE
}
y <- seq_len(n)
} else {
n <- length(y)
}
folds <- vector("list", k)
if (!stratified) {
# Unstratified: Simply randomize indices and assign to folds.
indices <- sample(n)
# Compute fold sizes: most folds will have floor(n/k) observations;
# the first few folds will get an extra one if n is not divisible by k.
fold_sizes <- rep(floor(n/k), k)
remainder <- n - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- indices[start_index:end_index]
start_index <- end_index + 1
}
} else {
# Stratified: The fold structure will preserve class proportions.
# First, ensure that y is a factor.
if (!is.factor(y)) {
y <- as.factor(y)
}
# Initialize each fold as an empty vector.
for (i in 1:k) {
folds[[i]] <- c()
}
# For each level (class), split the indices of that class into k roughly equal parts.
for (lvl in levels(y)) {
lvl_indices <- which(y == lvl)
lvl_indices <- sample(lvl_indices)  # Randomize the indices for this level.
n_lvl <- length(lvl_indices)
# Compute fold sizes for this class.
fold_sizes <- rep(floor(n_lvl/k), k)
remainder <- n_lvl - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- c(folds[[i]], lvl_indices[start_index:end_index])
start_index <- end_index + 1
}
}
return(folds)
}
kfold(10, 2, FALSE, 0)
folds
print("haha")
print("jaja")
createFolds <- function(y, k, stratified = FALSE, seed = 0) {
# Set the random seed
set.seed(seed)
# If y is a single number, treat it as sample size and create an index vector.
if (length(y) == 1 && is.numeric(y)) {
n <- y
if (stratified) {
warning("Stratification is only valid for categorical outputs. Using unstratified folds.")
stratified <- FALSE
}
y <- seq_len(n)
} else {
n <- length(y)
}
folds <- vector("list", k)
if (!stratified) {
# Unstratified: Simply randomize indices and assign to folds.
indices <- sample(n)
# Compute fold sizes: most folds will have floor(n/k) observations;
# the first few folds will get an extra one if n is not divisible by k.
fold_sizes <- rep(floor(n/k), k)
remainder <- n - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- indices[start_index:end_index]
start_index <- end_index + 1
}
} else {
# Stratified: The fold structure will preserve class proportions.
# First, ensure that y is a factor.
if (!is.factor(y)) {
y <- as.factor(y)
}
# Initialize each fold as an empty vector.
for (i in 1:k) {
folds[[i]] <- c()
}
# For each level (class), split the indices of that class into k roughly equal parts.
for (lvl in levels(y)) {
lvl_indices <- which(y == lvl)
lvl_indices <- sample(lvl_indices)  # Randomize the indices for this level.
n_lvl <- length(lvl_indices)
# Compute fold sizes for this class.
fold_sizes <- rep(floor(n_lvl/k), k)
remainder <- n_lvl - sum(fold_sizes)
if (remainder > 0) {
fold_sizes[1:remainder] <- fold_sizes[1:remainder] + 1
}
start_index <- 1
for (i in 1:k) {
end_index <- start_index + fold_sizes[i] - 1
folds[[i]] <- c(folds[[i]], lvl_indices[start_index:end_index])
start_index <- end_index + 1
}
}
return(folds)
}
kfold(10, 2, FALSE, 0)
