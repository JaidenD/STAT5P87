lambda = 0.01
#knots = unique(x)
knots = x
# Generate basis expansion
Hx <- function(x,knots){
M = 1
K = length(knots)
n = length(y)
# Create basis expansion
H = matrix(0, nrow = K, ncol = K)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
return(H)
}
# Construct the penalty matrix Omega, note that Omega is symmetric
Omegax <- function(knots)
l = length(knots)
Omega = matrix(NA, nrow = l, ncol = l)
Omega[1:2,] = 0
Omega[,1:2] = 0
for (i in 3:l) {
for (j in 3:l) {
if (j == i) {
Omega[i, j] <- 12 * (knots[l-1] - knots[i-2])^2 / (knots[l] - knots[i-2])
} else {
Omega[i, j] <- 6 * (knots[l-1] - knots[i-2]) *
(((3 * knots[j-2] - knots[l-1]) * knots[i-2]) - (knots[i-2]^2) +
2 * knots[l] * (knots[l-1] - knots[j-2]) - knots[j-2] * knots[l-1]) /
((knots[l] - knots[j-2]) * (knots[l] - knots[i-2]))
Omega[j, i] <- Omega[i, j]
}
}
return(Omega)
}
H = Hx(x,knots)
Omega = Omegax(knots)
B = solve(t(H)%*%H + lambda*Omega)%*%t(H)%*%y
data = read.csv("piecewise-data.csv")
head(data)
x = data$X
y = data$Y
odr = order(x)
x = x[odr]
y = y[odr]
#Part a
lambda = 0.01
#knots = unique(x)
knots = x
# Generate basis expansion
M = 1
K = length(knots)
n = length(y)
# Create basis expansion
H = matrix(0, nrow = K, ncol = K)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
# Construct the penalty matrix Omega, note that Omega is symmetric
l = length(knots)
Omega = matrix(NA, nrow = l, ncol = l)
Omega[1:2,] = 0
Omega[,1:2] = 0
for (i in 3:K) {
for (j in 3:K) {
if (j == i) {
Omega[i, j] <- 12 * (knots[K-1] - knots[i-2])^2 / (knots[K] - knots[i-2])
} else {
Omega[i, j] <- 6 * (knots[K-1] - knots[i-2]) *
(((3 * knots[j-2] - knots[K-1]) * knots[i-2]) - (knots[i-2]^2) +
2 * knots[K] * (knots[K-1] - knots[j-2]) - knots[j-2] * knots[K-1]) /
((knots[K] - knots[j-2]) * (knots[K] - knots[i-2]))
Omega[j, i] <- Omega[i, j]
}
}
}
Omega
B = solve(t(H)%*%H + lambda*Omega)%*%t(H)%*%y
yhat = H%*%B
# Part b
plot(x, y, main="Smooth Spline Fit", pch=16)
lines(x, yhat, col="goldenrod2",   lwd=2, lty=1)
#
basis <- function(knots){
# Create basis expansion
H = matrix(0, nrow = K, ncol = K)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
}
basis(knots)
basis <- function(knots){
# Create basis expansion
H = matrix(0, nrow = K, ncol = K)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
return(H)
}
H = basis(knots)
H
H1 = basis(knots)
H = matrix(0, nrow = K, ncol = K)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
H1==H
H = basis(knots,x)
basis <- function(knots,x){
# Create basis expansion
H = matrix(0, nrow = K, ncol = K)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
return(H)
}
H = basis(knots,x)
# Construct the penalty matrix Omega, note that Omega is symmetric
l = length(knots)
Omega = matrix(NA, nrow = l, ncol = l)
Omega[1:2,] = 0
Omega[,1:2] = 0
for (i in 3:K) {
for (j in 3:K) {
if (j == i) {
Omega[i, j] <- 12 * (knots[K-1] - knots[i-2])^2 / (knots[K] - knots[i-2])
} else {
Omega[i, j] <- 6 * (knots[K-1] - knots[i-2]) *
(((3 * knots[j-2] - knots[K-1]) * knots[i-2]) - (knots[i-2]^2) +
2 * knots[K] * (knots[K-1] - knots[j-2]) - knots[j-2] * knots[K-1]) /
((knots[K] - knots[j-2]) * (knots[K] - knots[i-2]))
Omega[j, i] <- Omega[i, j]
}
}
}
Omega
OmegaX <- function(knots){
l = length(knots)
Omega = matrix(NA, nrow = l, ncol = l)
Omega[1:2,] = 0
Omega[,1:2] = 0
for (i in 3:K) {
for (j in 3:K) {
if (j == i) {
Omega[i, j] <- 12 * (knots[K-1] - knots[i-2])^2 / (knots[K] - knots[i-2])
} else {
Omega[i, j] <- 6 * (knots[K-1] - knots[i-2]) *
(((3 * knots[j-2] - knots[K-1]) * knots[i-2]) - (knots[i-2]^2) +
2 * knots[K] * (knots[K-1] - knots[j-2]) - knots[j-2] * knots[K-1]) /
((knots[K] - knots[j-2]) * (knots[K] - knots[i-2]))
Omega[j, i] <- Omega[i, j]
}
}
}
}
A = OmegaX(knots)
A==Omega
OmegaX <- function(knots){
l = length(knots)
Omega = matrix(NA, nrow = l, ncol = l)
Omega[1:2,] = 0
Omega[,1:2] = 0
for (i in 3:K) {
for (j in 3:K) {
if (j == i) {
Omega[i, j] <- 12 * (knots[K-1] - knots[i-2])^2 / (knots[K] - knots[i-2])
} else {
Omega[i, j] <- 6 * (knots[K-1] - knots[i-2]) *
(((3 * knots[j-2] - knots[K-1]) * knots[i-2]) - (knots[i-2]^2) +
2 * knots[K] * (knots[K-1] - knots[j-2]) - knots[j-2] * knots[K-1]) /
((knots[K] - knots[j-2]) * (knots[K] - knots[i-2]))
Omega[j, i] <- Omega[i, j]
}
}
}
return(Omega)
}
A = OmegaX(knots)
A==Omega
B = solve(t(H)%*%H + lambda*Omega)%*%t(H)%*%y
yhat = H%*%B
# Part b
plot(x, y, main="Smooth Spline Fit", pch=16)
lines(x, yhat, col="goldenrod2",   lwd=2, lty=1)
data = read.csv("piecewise-data.csv")
head(data)
x = data$X
y = data$Y
odr = order(x)
x = x[odr]
y = y[odr]
#Part a
lambda = 0.01
#knots = unique(x)
knots = x
# Generate basis expansion
M = 1
K = length(knots)
n = length(y)
basis <- function(knots,x){
# Create basis expansion
H = matrix(0, nrow = K, ncol = K)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
return(H)
}
# Construct the penalty matrix Omega, note that Omega is symmetric
OmegaX <- function(knots){
l = length(knots)
Omega = matrix(NA, nrow = l, ncol = l)
Omega[1:2,] = 0
Omega[,1:2] = 0
for (i in 3:K) {
for (j in 3:K) {
if (j == i) {
Omega[i, j] <- 12 * (knots[K-1] - knots[i-2])^2 / (knots[K] - knots[i-2])
} else {
Omega[i, j] <- 6 * (knots[K-1] - knots[i-2]) *
(((3 * knots[j-2] - knots[K-1]) * knots[i-2]) - (knots[i-2]^2) +
2 * knots[K] * (knots[K-1] - knots[j-2]) - knots[j-2] * knots[K-1]) /
((knots[K] - knots[j-2]) * (knots[K] - knots[i-2]))
Omega[j, i] <- Omega[i, j]
}
}
}
return(Omega)
}
H = basis(knots,x)
Omega = OmegaX(knots)
B = solve(t(H)%*%H + lambda*Omega)%*%t(H)%*%y
yhat = H%*%B
# Part b
plot(x, y, main="Smooth Spline Fit", pch=16)
lines(x, yhat, col="goldenrod2",   lwd=2, lty=1)
#
data = read.csv("piecewise-data.csv")
head(data)
x = data$X
y = data$Y
odr = order(x)
x = x[odr]
y = y[odr]
#Part a
lambda = 0.01
#knots = unique(x)
knots = x
# Generate basis expansion
M = 1
K = length(knots)
n = length(y)
basis <- function(knots,x){
# Create basis expansion
H = matrix(0, nrow = K, ncol = K)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
return(H)
}
# Construct the penalty matrix Omega, note that Omega is symmetric
OmegaX <- function(knots){
l = length(knots)
Omega = matrix(NA, nrow = l, ncol = l)
Omega[1:2,] = 0
Omega[,1:2] = 0
for (i in 3:K) {
for (j in 3:K) {
if (j == i) {
Omega[i, j] <- 12 * (knots[K-1] - knots[i-2])^2 / (knots[K] - knots[i-2])
} else {
Omega[i, j] <- 6 * (knots[K-1] - knots[i-2]) *
(((3 * knots[j-2] - knots[K-1]) * knots[i-2]) - (knots[i-2]^2) +
2 * knots[K] * (knots[K-1] - knots[j-2]) - knots[j-2] * knots[K-1]) /
((knots[K] - knots[j-2]) * (knots[K] - knots[i-2]))
Omega[j, i] <- Omega[i, j]
}
}
}
return(Omega)
}
H = basis(knots,x)
Omega = OmegaX(knots)
B = solve(t(H)%*%H + lambda*Omega)%*%t(H)%*%y
yhat = H%*%B
# Part b
plot(x, y, main="Smooth Spline Fit", pch=16)
lines(x, yhat, col="goldenrod2",   lwd=2, lty=1)
#
# Part b
x0 = seq(0,1,by=0.01)
H0 = basis(knots,x0)
basis <- function(knots,x){
# Create basis expansion
lx = length(x)
H = matrix(0, nrow = lx, ncol = lx)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
return(H)
}
# Construct the penalty matrix Omega, note that Omega is symmetric
OmegaX <- function(knots){
l = length(knots)
Omega = matrix(NA, nrow = l, ncol = l)
Omega[1:2,] = 0
Omega[,1:2] = 0
for (i in 3:K) {
for (j in 3:K) {
if (j == i) {
Omega[i, j] <- 12 * (knots[K-1] - knots[i-2])^2 / (knots[K] - knots[i-2])
} else {
Omega[i, j] <- 6 * (knots[K-1] - knots[i-2]) *
(((3 * knots[j-2] - knots[K-1]) * knots[i-2]) - (knots[i-2]^2) +
2 * knots[K] * (knots[K-1] - knots[j-2]) - knots[j-2] * knots[K-1]) /
((knots[K] - knots[j-2]) * (knots[K] - knots[i-2]))
Omega[j, i] <- Omega[i, j]
}
}
}
return(Omega)
}
H = basis(knots,x)
Omega = OmegaX(knots)
B = solve(t(H)%*%H + lambda*Omega)%*%t(H)%*%y
yhat = H%*%B
# Part b
x0 = seq(0,1,by=0.01)
H0 = basis(knots,x0)
yhat0 = H0%*%B
# Part b
plot(x, y, main="Smooth Spline Fit", pch=16)
lines(x, yhat, col="goldenrod2",   lwd=2, lty=1)
# Part c
DF <- H %*% solve(t(H)%*%H + lambda*Omega) %*% t(H)
sum(diag(DF)) # degrees of freedom
# Lab 3
# 5P87
# Ryan Gunther
pwdata <- read.csv("piecewise-data.csv")
# need to compute matrix operation:
# (y-H(X)B)'(y-H(X)B) + lambda B' omega B
# df = Tr(H(x)(H(x)'H(x) + lambda(omega))inv H(x)'
# define variables:
lambda <- 0.01
y <- pwdata$Y
x <- pwdata$X
sorted <- order(x)
x <- x[sorted]
y <- y[sorted]
x
y
Hxfunc <- function(x) {
n <- length(x)
knots <- x
Hx <- matrix(0,nrow=n,ncol=n)
Hx[,1]<- 1
Hx[,2] <- x
# fill a list with the x coordinate of each knot
for (i in 1:n) {
slide5 <- (max(0, x[i] - knots[n-1])^3 - max(0, x[i] - knots[n])^3) / (knots[n] - knots[n-1])
for (k in 1:(n-2)) {
move <- k+2
dkx <- ((max(0, x[i] - knots[k])^3) - (max(0, x[i] - knots[n])^3)) / (knots[n] - knots[k])
Hx[i, move] <- dkx-slide5
}
}
return(Hx)
}
Hx <- Hxfunc(x)
Hx
# good thru here
# need to create 25x25 omega matrix
omega <- matrix(0,length(x),length(x))
omega
# if i or j < 3 (aka the intercept/input term), omega=0
# if i> j >2, formula on slide 6
# if i=j >2, shorter formula also on slide 6
n <- length(x)
knot_vals <- x
# i=j>2 formula:
for (i in 3:n) {
for (j in 3:i) {
knotsi2 <- i-2
knotsj2 <- j-2
xiki <- knot_vals[knotsi2]
xikj <- knot_vals[knotsj2]
if (i==j) {
omega[i,j] <- 12 * (knot_vals[n-1] - xiki)^2 /
(knot_vals[n] - xiki)
} else {
numerator <-(6 * (knot_vals[n-1] - xiki)*((3*xikj-knot_vals[n-1])*xiki-(xiki^2)+2*knot_vals[n]*(knot_vals[n-1]-xikj)-xikj*knot_vals[n-1]))
denominator <- ((knot_vals[n]-xikj)*(knot_vals[n]-xiki))
omega[i,j] <- numerator / denominator
omega[j,i] <- omega[i,j]
}
}
}
omega
b_hat <- solve(t(Hx)%*%Hx + lambda*omega)%*%t(Hx)%*%y
b_hat
y_hat <- Hx %*% b_hat
print(y_hat)
dfmat <- Hx %*% solve(t(Hx)%*%Hx + lambda*omega) %*% t(Hx)
df <- sum(diag(dfmat))
df
# plot
plot(x, y, main = "Fitted Smoothing Spline", xlab = "x", ylab = "y", pch = 19)
# plot spline
lines(x, y_hat, col = "hotpink", lwd = 2)
# double check with lambda adjustment from slide 8
lambda_adjust <- lambda / (max(x)-min(x))^3
spline <- smooth.spline(x, y, lambda = lambda_adjust)
lines(spline, col = "#BD3")
dfmat <- Hx %*% solve(t(Hx)%*%Hx + lambda*omega) %*% t(Hx)
df <- sum(diag(dfmat))
df
sum(diag(DF)) # degrees of freedom
data = read.csv("piecewise-data.csv")
head(data)
x = data$X
y = data$Y
odr = order(x)
x = x[odr]
y = y[odr]
#Part a
lambda = 0.01
#knots = unique(x)
knots = x
# Generate basis expansion
M = 1
K = length(knots)
n = length(y)
basis <- function(knots,x){
# Create basis expansion
lx = length(x)
H = matrix(0, nrow = lx, ncol = lx)
H[,1] = 1
H[,2] = x
dKMinus1 <- (pmax(0, x - knots[n-1])^3 - pmax(0, x - knots[n])^3) / (knots[n] - knots[n-1])
dk <- outer(x, knots[1:(K-2)], function(x_val, knot) {
(pmax(0, x_val - knot)^3 - pmax(0, x_val - knots[n])^3) / (knots[n] - knot)
})
H[, 3:K] <- dk - dKMinus1
return(H)
}
# Construct the penalty matrix Omega, note that Omega is symmetric
OmegaX <- function(knots){
l = length(knots)
Omega = matrix(NA, nrow = l, ncol = l)
Omega[1:2,] = 0
Omega[,1:2] = 0
for (i in 3:K) {
for (j in 3:K) {
if (j == i) {
Omega[i, j] <- 12 * (knots[K-1] - knots[i-2])^2 / (knots[K] - knots[i-2])
} else {
Omega[i, j] <- 6 * (knots[K-1] - knots[i-2]) *
(((3 * knots[j-2] - knots[K-1]) * knots[i-2]) - (knots[i-2]^2) +
2 * knots[K] * (knots[K-1] - knots[j-2]) - knots[j-2] * knots[K-1]) /
((knots[K] - knots[j-2]) * (knots[K] - knots[i-2]))
Omega[j, i] <- Omega[i, j]
}
}
}
return(Omega)
}
H = basis(knots,x)
Omega = OmegaX(knots)
B = solve(t(H)%*%H + lambda*Omega)%*%t(H)%*%y
yhat = H%*%B
# Part b
plot(x, y, main="Smooth Spline Fit", pch=16)
lines(x, yhat, col="goldenrod2",   lwd=2, lty=1)
# Part c
DF <- H %*% solve(t(H)%*%H + lambda*Omega) %*% t(H)
sum(diag(DF)) # degrees of freedom
