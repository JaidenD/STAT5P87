data = read.csv("simple-classification-data.csv")
head(data)
seq(0,0.5, length.out = 100)
x12 = seq(0,1, length.out = 200) - seq(0,0.5, length.out = 100)
x12
seq(0,1, length.out = 200)
seq(0,length.out=100)
x12 = seq(0,1, length.out = 200) - cbind(seq(0,0.5, length.out = 100),seq(0,0,length.out=100))
seq(0,0,length.out=100)
x12 = seq(0,1, length.out = 200) - cbind(seq(0,0.5, length.out = 100),seq(0,0,length.out=100))
x12
cbind(seq(0,0.5, length.out = 100),seq(0,0,length.out=100))
x12 = seq(0,1, length.out = 200) - rbind(seq(0,0.5, length.out = 100),seq(0,0,length.out=100))
rbind(seq(0,0.5, length.out = 100),seq(0,0,length.out=100))
x1 = seq(0,0.5, length.out = 100)          # x<=0.5
x2 = seq(0.5+0.5/100,1, length.out = 100)  # x>0.5
R1 = c(x1,x2)
R1
R1 = cbind(x1,x2)
cbind(x1,x2)
R1 = cbind(lessThanOrEq(0.5),lessThanOrEq(1))
R2 = cbind(lessThanOrEq(0.5),greaterThan(1))
R3 = cbind(greaterThan(0.5),lessThanOrEq(1))
greaterThan <- function(n, size=100){
return(seq(n+n/size,n+1/2+n/size, length.out = size))
}
lessThanOrEq <- function(n, size=100){
return(seq(n-1/2,n, length.out = size))
}
R1 = cbind(lessThanOrEq(0.5),lessThanOrEq(1))
R2 = cbind(lessThanOrEq(0.5),greaterThan(1))
R3 = cbind(greaterThan(0.5),lessThanOrEq(1))
R4 = cbind(greaterThan(0.5),greaterThan(1))
plot(R1)
plot(R1,R2,R3,R4)
plot(R1,R2,R3,R4)
plot(R1)
line(R2)
plot(R1)
line(R2)
lines(R2)
plot(R1)
lines(R2)
plot(c(R1,R2,R3,R4))
plot(R2)
plot(R3)
plot(R2)
plot(c(R1,R2,R3,R4))
c(R1,R2,R3,R4)
R4
c(R1,R2)
r(R1,R2)
rbind(R1,R2)
rbind(R1,R2,R3,R4)
plot(rbind(R1,R2,R3,R4))
plot(rbind(R1,R2,R3,R4))
plot(rbind(R1,R2,R3,R4))
# Create a function to determine the region color
get_region_color <- function(x1, x2) {
if (x1 <= 0.5 & x2 <= 1) {
return("skyblue")  # R1
} else if (x1 <= 0.5 & x2 > 1) {
return("lightgreen")  # R2
} else if (x1 > 0.5 & x2 <= 1) {
return("salmon")  # R3
} else if (x1 > 0.5 & x2 > 1) {
return("plum")  # R4
}
}
# Create a grid of points
x1_range <- seq(0, 1, length.out = 100)
x2_range <- seq(0, 2, length.out = 100)
# Create a matrix for the region colors
region_matrix <- matrix(NA, nrow = length(x1_range), ncol = length(x2_range))
# Fill in the region matrix with colors
for (i in 1:length(x1_range)) {
for (j in 1:length(x2_range)) {
region_matrix[i, j] <- get_region_color(x1_range[i], x2_range[j])
}
}
# Set up the plot
par(mar = c(5, 4, 4, 8) + 0.1)  # Adjust margins to make room for legend
# Create the plot
image(x1_range, x2_range, z = matrix(1:length(x1_range), nrow = length(x1_range), ncol = length(x2_range)),
col = region_matrix, xlab = "x1", ylab = "x2",
main = "Two-Dimensional Spline Regions", axes = TRUE)
# Add the knot lines
abline(v = 0.5, lty = 2)
abline(h = 1, lty = 2)
# Add region labels
text(0.25, 0.5, "R1")
text(0.25, 1.5, "R2")
text(0.75, 0.5, "R3")
text(0.75, 1.5, "R4")
# Add a legend
legend_colors <- c("skyblue", "lightgreen", "salmon", "plum")
legend_labels <- c("R1", "R2", "R3", "R4")
legend("topright", inset = c(-0.2, 0), legend = legend_labels,
fill = legend_colors, title = "Regions", xpd = TRUE)
# Create the plot with basic dimensions
plot(c(0, 1), c(0, 2), type = "n", xlab = "x1", ylab = "x2",
main = "Two-Dimensional Spline Regions", asp = 1)
# Add the knot lines
abline(v = 0.5, lty = 2)
abline(h = 1, lty = 2)
# Define the regions
# R1: x1 <= 0.5, x2 <= 1
# R2: x1 <= 0.5, x2 > 1
# R3: x1 > 0.5, x2 <= 1
# R4: x1 > 0.5, x2 > 1
# Add pattern/shading to each region using different line patterns
# Region R1
x1_seq <- seq(0, 0.5, length.out = 10)
for (i in seq(0, 1, by = 0.1)) {
lines(c(0, 0.5), c(i, i), lty = 1)
}
for (i in seq(0, 0.5, by = 0.05)) {
lines(c(i, i), c(0, 1), lty = 1)
}
# Region R2
for (i in seq(1, 2, by = 0.1)) {
lines(c(0, 0.5), c(i, i), lty = 3)
}
for (i in seq(0, 0.5, by = 0.05)) {
lines(c(i, i), c(1, 2), lty = 3)
}
# Region R3
for (i in seq(0, 1, by = 0.1)) {
lines(c(0.5, 1), c(i, i), lty = 4)
}
for (i in seq(0.5, 1, by = 0.05)) {
lines(c(i, i), c(0, 1), lty = 4)
}
# Region R4
for (i in seq(1, 2, by = 0.1)) {
lines(c(0.5, 1), c(i, i), lty = 5)
}
for (i in seq(0.5, 1, by = 0.05)) {
lines(c(i, i), c(1, 2), lty = 5)
}
# Add region labels
text(0.25, 0.5, "R1")
text(0.25, 1.5, "R2")
text(0.75, 0.5, "R3")
text(0.75, 1.5, "R4")
# Add a legend
legend("topright", legend = c("R1", "R2", "R3", "R4"),
lty = c(1, 3, 4, 5), title = "Regions")
text(0.75, 1.5, "R4")
# Create a simple plot with the correct dimensions
plot(c(0, 1), c(0, 2), type = "n", xlab = "x1", ylab = "x2",
main = "Two-Dimensional Spline Regions")
# Add the knot lines
abline(v = 0.5, lty = 2)
abline(h = 1, lty = 2)
# Add region labels
text(0.25, 0.5, "R1")
text(0.25, 1.5, "R2")
text(0.75, 0.5, "R3")
text(0.75, 1.5, "R4")
data = read.csv("simple-classification-data.csv")
head(data)
# Define the regions
# Create functions that return TRUE if a point is in a region
is_in_R1 <- function(x1, x2) {
return(x1 <= 0.5 & x2 <= 1)
}
is_in_R2 <- function(x1, x2) {
return(x1 <= 0.5 & x2 > 1)
}
is_in_R3 <- function(x1, x2) {
return(x1 > 0.5 & x2 <= 1)
}
is_in_R4 <- function(x1, x2) {
return(x1 > 0.5 & x2 > 1)
}
# Create the plot
plot(c(0, 1), c(0, 2), type = "n", xlab = "x1", ylab = "x2",
main = "Two-Dimensional Spline Regions")
# Find the boundaries by looking at where regions change
# Horizontal boundary (where x2 = 1)
x1_vals <- seq(0, 1, by = 0.01)
x2_boundary <- rep(1, length(x1_vals))
lines(x1_vals, x2_boundary, lty = 2)
# Vertical boundary (where x1 = 0.5)
x2_vals <- seq(0, 2, by = 0.01)
x1_boundary <- rep(0.5, length(x2_vals))
lines(x1_boundary, x2_vals, lty = 2)
# Sample points in each region to add labels
# For R1
R1_points <- expand.grid(x1 = seq(0, 0.5, by = 0.1), x2 = seq(0, 1, by = 0.1))
R1_points <- R1_points[apply(R1_points, 1, function(p) is_in_R1(p[1], p[2])), ]
R1_center <- c(mean(R1_points$x1), mean(R1_points$x2))
text(R1_center[1], R1_center[2], "R1")
# For R2
R2_points <- expand.grid(x1 = seq(0, 0.5, by = 0.1), x2 = seq(1, 2, by = 0.1))
R2_points <- R2_points[apply(R2_points, 1, function(p) is_in_R2(p[1], p[2])), ]
R2_center <- c(mean(R2_points$x1), mean(R2_points$x2))
text(R2_center[1], R2_center[2], "R2")
# For R3
R3_points <- expand.grid(x1 = seq(0.5, 1, by = 0.1), x2 = seq(0, 1, by = 0.1))
R3_points <- R3_points[apply(R3_points, 1, function(p) is_in_R3(p[1], p[2])), ]
R3_center <- c(mean(R3_points$x1), mean(R3_points$x2))
text(R3_center[1], R3_center[2], "R3")
# For R4
R4_points <- expand.grid(x1 = seq(0.5, 1, by = 0.1), x2 = seq(1, 2, by = 0.1))
R4_points <- R4_points[apply(R4_points, 1, function(p) is_in_R4(p[1], p[2])), ]
R4_center <- c(mean(R4_points$x1), mean(R4_points$x2))
text(R4_center[1], R4_center[2], "R4")
data = read.csv("simple-classification-data.csv")
head(data)
# Define the regions as a list of functions
regions <- list(
R1 = function(x1, x2) x1 <= 0.5 & x2 <= 1,
R2 = function(x1, x2) x1 <= 0.5 & x2 > 1,
R3 = function(x1, x2) x1 > 0.5 & x2 <= 1,
R4 = function(x1, x2) x1 > 0.5 & x2 > 1
)
# Function to find region centers
find_region_center <- function(region_func, x1_range, x2_range) {
points <- expand.grid(x1 = x1_range, x2 = x2_range)
in_region <- apply(points, 1, function(p) region_func(p[1], p[2]))
region_points <- points[in_region, ]
return(c(mean(region_points$x1), mean(region_points$x2)))
}
# Create the plot
plot(c(0, 1), c(0, 2), type = "n", xlab = "x1", ylab = "x2",
main = "Two-Dimensional Spline Regions")
# Determine boundaries from region definitions
# Boundary at x1 = 0.5 (where R1/R2 changes to R3/R4)
x2_vals <- seq(0, 2, by = 0.01)
lines(rep(0.5, length(x2_vals)), x2_vals, lty = 2)
# Boundary at x2 = 1 (where R1/R3 changes to R2/R4)
x1_vals <- seq(0, 1, by = 0.01)
lines(x1_vals, rep(1, length(x1_vals)), lty = 2)
# Find centers and add labels for each region
# Define sampling ranges for each region
region_ranges <- list(
R1 = list(x1 = seq(0, 0.5, by = 0.1), x2 = seq(0, 1, by = 0.1)),
R2 = list(x1 = seq(0, 0.5, by = 0.1), x2 = seq(1, 2, by = 0.1)),
R3 = list(x1 = seq(0.5, 1, by = 0.1), x2 = seq(0, 1, by = 0.1)),
R4 = list(x1 = seq(0.5, 1, by = 0.1), x2 = seq(1, 2, by = 0.1))
)
# Add labels for each region
for (i in 1:4) {
region_name <- paste0("R", i)
center <- find_region_center(
regions[[region_name]],
region_ranges[[region_name]]$x1,
region_ranges[[region_name]]$x2
)
text(center[1], center[2], region_name)
}
get_region <- function(x1, x2) {
for (i in 1:4) {
region_name <- paste0("R", i)
if (regions[[region_name]](x1, x2)) {
return(i)
}
}
return(NA)  # Should not happen if regions cover all space
}
# Assign regions to all data points
data$region <- mapply(get_region, data$x1, data$x2)
# Fit piecewise constant model
# For each region, use the majority class as the prediction
region_models <- list()
for (i in 1:4) {
region_data <- subset(data, region == i)
if (nrow(region_data) > 0) {
# Count occurrences of each class in this region
class_counts <- table(region_data$y)
# Use majority class as the model for this region
majority_class <- as.numeric(names(class_counts)[which.max(class_counts)])
region_models[[i]] <- majority_class
} else {
# If no data in a region, use overall majority class
region_models[[i]] <- as.numeric(names(which.max(table(data$y))))
}
}
# Make predictions for all data points
predict_y <- function(x1, x2) {
region <- get_region(x1, x2)
return(region_models[[region]])
}
data$y_pred <- mapply(predict_y, data$x1, data$x2)
# Calculate training accuracy
accuracy <- mean(data$y == data$y_pred)
cat("Training accuracy:", round(accuracy * 100, 2), "%\n")
# Print the piecewise constant model
cat("\nPiecewise Constant Model:\n")
for (i in 1:4) {
cat("Region R", i, ": y = ", region_models[[i]], "\n", sep = "")
}
accuracy
data = read.csv("simple-classification-data.csv")
head(data)
# Part a
# Define the regions as a list of functions
regions <- list(
R1 = function(x1, x2) x1 <= 0.5 & x2 <= 1,
R2 = function(x1, x2) x1 <= 0.5 & x2 > 1,
R3 = function(x1, x2) x1 > 0.5 & x2 <= 1,
R4 = function(x1, x2) x1 > 0.5 & x2 > 1
)
# Function to find region centers
find_region_center <- function(region_func, x1_range, x2_range) {
points <- expand.grid(x1 = x1_range, x2 = x2_range)
in_region <- apply(points, 1, function(p) region_func(p[1], p[2]))
region_points <- points[in_region, ]
return(c(mean(region_points$x1), mean(region_points$x2)))
}
# Create the plot
plot(c(0, 1), c(0, 2), type = "n", xlab = "x1", ylab = "x2",
main = "Two-Dimensional Spline Regions")
# Determine boundaries from region definitions
# Boundary at x1 = 0.5 (where R1/R2 changes to R3/R4)
x2_vals <- seq(0, 2, by = 0.01)
lines(rep(0.5, length(x2_vals)), x2_vals, lty = 2)
# Boundary at x2 = 1 (where R1/R3 changes to R2/R4)
x1_vals <- seq(0, 1, by = 0.01)
lines(x1_vals, rep(1, length(x1_vals)), lty = 2)
# Find centers and add labels for each region
# Define sampling ranges for each region
region_ranges <- list(
R1 = list(x1 = seq(0, 0.5, by = 0.1), x2 = seq(0, 1, by = 0.1)),
R2 = list(x1 = seq(0, 0.5, by = 0.1), x2 = seq(1, 2, by = 0.1)),
R3 = list(x1 = seq(0.5, 1, by = 0.1), x2 = seq(0, 1, by = 0.1)),
R4 = list(x1 = seq(0.5, 1, by = 0.1), x2 = seq(1, 2, by = 0.1))
)
# Add labels for each region
for (i in 1:4) {
region_name <- paste0("R", i)
center <- find_region_center(
regions[[region_name]],
region_ranges[[region_name]]$x1,
region_ranges[[region_name]]$x2
)
text(center[1], center[2], region_name)
}
# Part b
get_region <- function(x1, x2) {
for (i in 1:4) {
region_name <- paste0("R", i)
if (regions[[region_name]](x1, x2)) {
return(i)
}
}
return(NA)  # Should not happen if regions cover all space
}
# Assign regions to all data points
data$region <- mapply(get_region, data$x1, data$x2)
# Fit piecewise constant model
# For each region, use the majority class as the prediction
region_models <- list()
for (i in 1:4) {
region_data <- subset(data, region == i)
if (nrow(region_data) > 0) {
# Count occurrences of each class in this region
class_counts <- table(region_data$y)
# Use majority class as the model for this region
majority_class <- as.numeric(names(class_counts)[which.max(class_counts)])
region_models[[i]] <- majority_class
} else {
# If no data in a region, use overall majority class
region_models[[i]] <- as.numeric(names(which.max(table(data$y))))
}
}
# Make predictions for all data points
predict_y <- function(x1, x2) {
region <- get_region(x1, x2)
return(region_models[[region]])
}
data$y_pred <- mapply(predict_y, data$x1, data$x2)
# Calculate training accuracy
accuracy <- mean(data$y == data$y_pred)
cat("Training accuracy:", round(accuracy * 100, 2), "%\n")
# Print the piecewise constant model
cat("\nPiecewise Constant Model:\n")
for (i in 1:4) {
cat("Region R", i, ": y = ", region_models[[i]], "\n", sep = "")
}
# Load the dataset if not already loaded
if (!exists("data")) {
data = read.csv("simple-classification-data.csv")
}
# Function to create basis functions for the piecewise linear model
# We need basis functions that allow for slope changes at x1 = 0.5 and x2 = 1
create_basis_matrix = function(x1, x2) {
# Create basis matrix
# 1. Constant term
# 2. x1 term
# 3. x2 term
# 4. (x1 - 0.5)+ term (allows slope change at x1 = 0.5)
# 5. (x2 - 1)+ term (allows slope change at x2 = 1)
# ReLU function (x)+ = max(0, x)
relu = function(x) pmax(0, x)
# Create the basis matrix
X = cbind(
1,             # Constant term
x1,            # Linear term for x1
x2,            # Linear term for x2
relu(x1 - 0.5), # ReLU term for x1 at knot 0.5
relu(x2 - 1)    # ReLU term for x2 at knot 1
)
colnames(X) = c("Constant", "x1", "x2", "x1_knot", "x2_knot")
return(X)
}
# Create the design matrix for our data
X = create_basis_matrix(data$x1, data$x2)
# Fit logistic regression model
# For classification, we use logistic regression to fit a piecewise linear model
model = glm(y ~ 0 + ., data = data.frame(y = data$y, X), family = binomial)
# Print model coefficients
cat("Piecewise Linear Model Coefficients:\n")
print(coef(model))
# Make predictions
logits = predict(model, data.frame(X), type = "link")
probs = 1 / (1 + exp(-logits))
y_pred = ifelse(probs > 0.5, 1, 0)
# Calculate training accuracy
accuracy = mean(data$y == y_pred)
cat("\nTraining accuracy:", round(accuracy * 100, 2), "%\n")
# Visualize the decision boundary of the piecewise linear model
# Create a grid of points
grid_size = 100
x1_grid = seq(0, 1, length.out = grid_size)
x2_grid = seq(0, 2, length.out = grid_size)
grid_points = expand.grid(x1 = x1_grid, x2 = x2_grid)
# Create basis matrix for grid points
X_grid = create_basis_matrix(grid_points$x1, grid_points$x2)
# Predict probabilities for grid points
grid_logits = predict(model, data.frame(X_grid), type = "link")
grid_probs = 1 / (1 + exp(-grid_logits))
grid_pred = ifelse(grid_probs > 0.5, 1, 0)
# Reshape predictions for contour plot
z = matrix(grid_pred, nrow = grid_size, ncol = grid_size)
# Plot the data and decision boundary
plot(data$x1, data$x2, col = ifelse(data$y == 1, "blue", "red"),
pch = ifelse(y_pred == data$y, 16, 4),
main = "Piecewise Linear Model with Decision Boundary",
xlab = "x1", ylab = "x2")
# Add decision boundary contour
contour(x1_grid, x2_grid, z, levels = 0.5, add = TRUE, lwd = 2)
# Add knot lines
abline(v = 0.5, lty = 2)
abline(h = 1, lty = 2)
# Add legend
legend("topright",
legend = c("Class 0", "Class 1", "Correct Prediction", "Incorrect Prediction"),
col = c("red", "blue", "black", "black"),
pch = c(16, 16, 16, 4))
# Evaluate the model at specific points to verify continuity
evaluate_model = function(x1, x2) {
X_point = create_basis_matrix(x1, x2)
logit = sum(coef(model) * X_point)
prob = 1 / (1 + exp(-logit))
return(prob)
}
# Check continuity at x1 = 0.5 by evaluating points slightly to the left and right
x1_left = 0.499
x1_right = 0.501
x2_test = 0.5
prob_left = evaluate_model(x1_left, x2_test)
prob_right = evaluate_model(x1_right, x2_test)
cat("\nContinuity check at x1 = 0.5:\n")
cat("Probability at x1 =", x1_left, ":", prob_left, "\n")
cat("Probability at x1 =", x1_right, ":", prob_right, "\n")
cat("Difference:", abs(prob_right - prob_left), "\n")
# Similarly for x2 = 1
x1_test = 0.5
x2_below = 0.999
x2_above = 1.001
prob_below = evaluate_model(x1_test, x2_below)
prob_above = evaluate_model(x1_test, x2_above)
cat("\nContinuity check at x2 = 1:\n")
cat("Probability at x2 =", x2_below, ":", prob_below, "\n")
cat("Probability at x2 =", x2_above, ":", prob_above, "\n")
cat("Difference:", abs(prob_above - prob_below), "\n")
data = read.csv('piecewise-data.csv')
x = data$X
